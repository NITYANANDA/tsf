JAX-RS JAX-WS Description First Example 
================================

The demo shows how SOAP services created as part fo the document (WSDL) first approach process can get
RESTified by having a CXF JAX-RS user model resource added which describes how an interface generated by the wsdl-to-java tool
can be treated as the JAX-RS root resource.


Building the Demo
---------------------------------------

This sample consists of 3 parts:
common/   - This directory contains the ConsumerService.wsdl which is used to generate the initial code and 
            the ConsumerService-jaxrs.xml user model resource. 
            
service/  - This is where a ConsumerService service implementation shared by JAX-RS and JAX-WS endpoints is located

war/      - This module creates a WAR archive containing the code from common and service modules.   

client/   - This is a sample client application that shows how CXF JAX-RS and JAX-WS proxies are invoking on remote 
            JAX-RS and JAX-WS endpoints represented by ConsumerService interface 


From the base directory of this sample (i.e., where this README file is
located), the maven pom.xml file can be used to build and run the demo. 


Using either UNIX or Windows:

    mvn install

Running this command will build the demo and create a WAR archive and an OSGI bundle 
for deploying the service either to servlet or OSGI containers.

Deploying the service
---------------------------------------
 * To the servlet container

    cd war; mvn jetty:run

 * To the OSGI container

    From the OSGi command line, run:
	install mvn:com.talend.sf.examples/jaxrs-jaxws-description-first-common/1.0
        install mvn:com.talend.sf.examples/jaxrs-jaxws-description-first-service/1.0
     That should print out the bundle IDs for the common and server bundles. From 
     the OSGi command line, then start the installed bundles, for example
        start 115
     where 115 is the bundle ID number that was printed during install.

Running the client
---------------------------------------

 * From the command line
   - cd client
   - mvn exec:java

By default, the client will use the http port 8080 for constructing the URIs.
This port value is set during the build in the client.properties resource file. If the server is listening on the alternative port then you can use an 'http.port' system property during the build :
   
- mvn install -Dhttp.port=8181

Demo Desciption
---------------

The goal of the demo is to show how the existing production code created as part of the document-first development process can be easily exposed as RESTful service by indirectly applying an external CXF JAX-RS user model resource to the interfaces and/or concrete implementations, for example, to ConsumerService interface. 


